
sensor_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000292  00000000  00000000  0000014f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000102  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000021a  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c5  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000178  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	43 c0       	rjmp	.+134    	; 0xbc <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

void main()
{
   DDRB=0b11111111;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
   DDRC=0b0000000;
  3c:	14 ba       	out	0x14, r1	; 20
   {
      rs=PINC&0b0001000;
	  ls=PINC&0b0000001;
	  if((ls==0b0000001) && (rs==0b0001000))
	  {
	     PORTB=0b00010010;
  3e:	42 e1       	ldi	r20, 0x12	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  40:	29 e1       	ldi	r18, 0x19	; 25
  42:	30 e0       	ldi	r19, 0x00	; 0

	  if((ls==0b0000000) && (rs==0b0000000))
	  {
	     PORTB=0b00000000;
		 _delay_ms(20000);
		 PORTB=0b00001100;
  44:	6c e0       	ldi	r22, 0x0C	; 12
		 _delay_ms(20000);
		 _delay_ms(20000);
		 _delay_ms(20000);
		 PORTB=0b00010000;
  46:	50 e1       	ldi	r21, 0x10	; 16
   DDRC=0b0000000;
   int rs=0;
   int ls=0;
   while(1)
   {
      rs=PINC&0b0001000;
  48:	83 b3       	in	r24, 0x13	; 19
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	88 70       	andi	r24, 0x08	; 8
  4e:	90 70       	andi	r25, 0x00	; 0
	  ls=PINC&0b0000001;
	  if((ls==0b0000001) && (rs==0b0001000))
  50:	98 9b       	sbis	0x13, 0	; 19
  52:	03 c0       	rjmp	.+6      	; 0x5a <__SREG__+0x1b>
  54:	08 97       	sbiw	r24, 0x08	; 8
  56:	c1 f7       	brne	.-16     	; 0x48 <__SREG__+0x9>
  58:	2f c0       	rjmp	.+94     	; 0xb8 <__SREG__+0x79>
	  {
	     PORTB=0b00010010;
	  }

	  if((ls==0b0000000) && (rs==0b0000000))
  5a:	89 2b       	or	r24, r25
  5c:	a9 f7       	brne	.-22     	; 0x48 <__SREG__+0x9>
	  {
	     PORTB=0b00000000;
  5e:	18 ba       	out	0x18, r1	; 24
  60:	8f ef       	ldi	r24, 0xFF	; 255
  62:	9f ef       	ldi	r25, 0xFF	; 255
  64:	f9 01       	movw	r30, r18
  66:	31 97       	sbiw	r30, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <__SREG__+0x27>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  6c:	d9 f7       	brne	.-10     	; 0x64 <__SREG__+0x25>
		 _delay_ms(20000);
		 PORTB=0b00001100;
  6e:	68 bb       	out	0x18, r22	; 24
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	9f ef       	ldi	r25, 0xFF	; 255
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7c:	d9 f7       	brne	.-10     	; 0x74 <__SREG__+0x35>
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	9f ef       	ldi	r25, 0xFF	; 255
  82:	f9 01       	movw	r30, r18
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <__SREG__+0x45>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8a:	d9 f7       	brne	.-10     	; 0x82 <__SREG__+0x43>
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	9f ef       	ldi	r25, 0xFF	; 255
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__SREG__+0x53>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	d9 f7       	brne	.-10     	; 0x90 <__SREG__+0x51>
		 _delay_ms(20000);
		 _delay_ms(20000);
		 _delay_ms(20000);
		 PORTB=0b00010000;
  9a:	58 bb       	out	0x18, r21	; 24
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <__SREG__+0x63>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__SREG__+0x61>
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	f9 01       	movw	r30, r18
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <__SREG__+0x71>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b6:	d9 f7       	brne	.-10     	; 0xae <__SREG__+0x6f>
		 _delay_ms(20000);
		 _delay_ms(20000);
		 PORTB=0b00010010;
  b8:	48 bb       	out	0x18, r20	; 24
  ba:	c6 cf       	rjmp	.-116    	; 0x48 <__SREG__+0x9>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
